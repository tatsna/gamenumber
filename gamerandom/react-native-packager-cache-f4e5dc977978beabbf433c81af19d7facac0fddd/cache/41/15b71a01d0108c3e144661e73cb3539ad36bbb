/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SwipeableListView
 * 
 */
'use strict';var _jsxFileName="/home/perdto/test2/node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableListView.js";

var ListView=require('ListView');
var React=require('React');
var SwipeableListViewDataSource=require('SwipeableListViewDataSource');
var SwipeableRow=require('SwipeableRow');var

PropTypes=React.PropTypes;



















/**
 * A container component that renders multiple SwipeableRow's in a ListView
 * implementation. This is designed to be a drop-in replacement for the
 * standard React Native `ListView`, so use it as if it were a ListView, but
 * with extra props, i.e.
 *
 * let ds = SwipeableListView.getNewDataSource();
 * ds.cloneWithRowsAndSections(dataBlob, ?sectionIDs, ?rowIDs);
 * // ..
 * <SwipeableListView renderRow={..} renderQuickActions={..} {..ListView props} />
 *
 * SwipeableRow can be used independently of this component, but the main
 * benefit of using this component is
 *
 * - It ensures that at most 1 row is swiped open (auto closes others)
 * - It can bounce the 1st row of the list so users know it's swipeable
 * - More to come
 */var
SwipeableListView=function(_React$Component){babelHelpers.inherits(SwipeableListView,_React$Component);babelHelpers.createClass(SwipeableListView,null,[{key:"getNewDataSource",value:function getNewDataSource()






{
return new SwipeableListViewDataSource({
getRowData:function getRowData(data,sectionID,rowID){return data[sectionID][rowID];},
getSectionHeaderData:function getSectionHeaderData(data,sectionID){return data[sectionID];},
rowHasChanged:function rowHasChanged(row1,row2){return row1!==row2;},
sectionHeaderHasChanged:function sectionHeaderHasChanged(s1,s2){return s1!==s2;}});

}}]);




























function SwipeableListView(props,context){babelHelpers.classCallCheck(this,SwipeableListView);var _this=babelHelpers.possibleConstructorReturn(this,(SwipeableListView.__proto__||Object.getPrototypeOf(SwipeableListView)).call(this,
props,context));_this._listViewRef=null;_this._shouldBounceFirstRowOnMount=false;_this.





























_onScroll=function(e){
// Close any opens rows on ListView scroll
if(_this.props.dataSource.getOpenRowID()){
_this.setState({
dataSource:_this.state.dataSource.setOpenRowID(null)});

}
_this.props.onScroll&&_this.props.onScroll(e);
};_this.































_renderRow=function(rowData,sectionID,rowID){
var slideoutView=_this.props.renderQuickActions(rowData,sectionID,rowID);

// If renderQuickActions is unspecified or returns falsey, don't allow swipe
if(!slideoutView){
return _this.props.renderRow(rowData,sectionID,rowID);
}

var shouldBounceOnMount=false;
if(_this._shouldBounceFirstRowOnMount){
_this._shouldBounceFirstRowOnMount=false;
shouldBounceOnMount=rowID===_this.props.dataSource.getFirstRowID();
}

return(
React.createElement(SwipeableRow,{
slideoutView:slideoutView,
isOpen:rowData.id===_this.props.dataSource.getOpenRowID(),
maxSwipeDistance:_this._getMaxSwipeDistance(rowData,sectionID,rowID),
key:rowID,
onOpen:function onOpen(){return _this._onOpen(rowData.id);},
onClose:function onClose(){return _this._onClose(rowData.id);},
onSwipeEnd:function onSwipeEnd(){return _this._setListViewScrollable(true);},
onSwipeStart:function onSwipeStart(){return _this._setListViewScrollable(false);},
shouldBounceOnMount:shouldBounceOnMount,__source:{fileName:_jsxFileName,lineNumber:186}},
_this.props.renderRow(rowData,sectionID,rowID)));


};_this._shouldBounceFirstRowOnMount=_this.props.bounceFirstRowOnMount;_this.state={dataSource:_this.props.dataSource};return _this;}babelHelpers.createClass(SwipeableListView,[{key:"componentWillReceiveProps",value:function componentWillReceiveProps(nextProps){if(this.state.dataSource.getDataSource()!==nextProps.dataSource.getDataSource()){this.setState({dataSource:nextProps.dataSource});}}},{key:"render",value:function render(){var _this2=this;return React.createElement(ListView,babelHelpers.extends({},this.props,{ref:function ref(_ref){_this2._listViewRef=_ref;},dataSource:this.state.dataSource.getDataSource(),onScroll:this._onScroll,renderRow:this._renderRow,__source:{fileName:_jsxFileName,lineNumber:119}}));}},{key:"_setListViewScrollable",/**
   * This is a work-around to lock vertical `ListView` scrolling on iOS and
   * mimic Android behaviour. Locking vertical scrolling when horizontal
   * scrolling is active allows us to significantly improve framerates
   * (from high 20s to almost consistently 60 fps)
   */value:function _setListViewScrollable(value){if(this._listViewRef&&typeof this._listViewRef.setNativeProps==='function'){this._listViewRef.setNativeProps({scrollEnabled:value});}}// Passing through ListView's getScrollResponder() function
},{key:"getScrollResponder",value:function getScrollResponder(){if(this._listViewRef&&typeof this._listViewRef.getScrollResponder==='function'){return this._listViewRef.getScrollResponder();}}// This enables rows having variable width slideoutView.
},{key:"_getMaxSwipeDistance",value:function _getMaxSwipeDistance(rowData,sectionID,rowID){if(typeof this.props.maxSwipeDistance==='function'){return this.props.maxSwipeDistance(rowData,sectionID,rowID);}return this.props.maxSwipeDistance;}},{key:"_onOpen",value:function _onOpen(rowID){this.setState({dataSource:this.state.dataSource.setOpenRowID(rowID)});}},{key:"_onClose",value:function _onClose(
rowID){
this.setState({
dataSource:this.state.dataSource.setOpenRowID(null)});

}}]);return SwipeableListView;}(React.Component);SwipeableListView.propTypes={/**
     * To alert the user that swiping is possible, the first row can bounce
     * on component mount.
     */bounceFirstRowOnMount:PropTypes.bool.isRequired,/**
     * Use `SwipeableListView.getNewDataSource()` to get a data source to use,
     * then use it just like you would a normal ListView data source
     */dataSource:PropTypes.instanceOf(SwipeableListViewDataSource).isRequired,// Maximum distance to open to after a swipe
maxSwipeDistance:PropTypes.oneOfType([PropTypes.number,PropTypes.func]).isRequired,// Callback method to render the swipeable view
renderRow:PropTypes.func.isRequired,// Callback method to render the view that will be unveiled on swipe
renderQuickActions:PropTypes.func.isRequired};SwipeableListView.defaultProps={bounceFirstRowOnMount:false,renderQuickActions:function renderQuickActions(){return null;}};module.exports=SwipeableListView;