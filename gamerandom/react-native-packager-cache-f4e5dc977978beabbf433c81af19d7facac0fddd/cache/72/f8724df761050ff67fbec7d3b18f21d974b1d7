/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactFiberHostContext
 * 
 */

'use strict';var _require=





require('ReactFiberStack'),createCursor=_require.createCursor,pop=_require.pop,push=_require.push;

var invariant=require('fbjs/lib/invariant');


var NO_CONTEXT={};











module.exports=function(
config)
{var
getChildHostContext=config.getChildHostContext,getRootHostContext=config.getRootHostContext;

var contextStackCursor=createCursor(
NO_CONTEXT);

var contextFiberStackCursor=createCursor(
NO_CONTEXT);

var rootInstanceStackCursor=createCursor(
NO_CONTEXT);


function requiredContext(c){
invariant(
c!==NO_CONTEXT,"Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");



return c;
}

function getRootHostContainer(){
var rootInstance=requiredContext(rootInstanceStackCursor.current);
return rootInstance;
}

function pushHostContainer(fiber,nextRootInstance){
// Push current root instance onto the stack;
// This allows us to reset root when portals are popped.
push(rootInstanceStackCursor,nextRootInstance,fiber);

var nextRootContext=getRootHostContext(nextRootInstance);

// Track the context and the Fiber that provided it.
// This enables us to pop only Fibers that provide unique contexts.
push(contextFiberStackCursor,fiber,fiber);
push(contextStackCursor,nextRootContext,fiber);
}

function popHostContainer(fiber){
pop(contextStackCursor,fiber);
pop(contextFiberStackCursor,fiber);
pop(rootInstanceStackCursor,fiber);
}

function getHostContext(){
var context=requiredContext(contextStackCursor.current);
return context;
}

function pushHostContext(fiber){
var rootInstance=requiredContext(rootInstanceStackCursor.current);
var context=requiredContext(contextStackCursor.current);
var nextContext=getChildHostContext(context,fiber.type,rootInstance);

// Don't push this Fiber's context unless it's unique.
if(context===nextContext){
return;
}

// Track the context and the Fiber that provided it.
// This enables us to pop only Fibers that provide unique contexts.
push(contextFiberStackCursor,fiber,fiber);
push(contextStackCursor,nextContext,fiber);
}

function popHostContext(fiber){
// Do not pop unless this Fiber provided the current context.
// pushHostContext() only pushes Fibers that provide unique contexts.
if(contextFiberStackCursor.current!==fiber){
return;
}

pop(contextStackCursor,fiber);
pop(contextFiberStackCursor,fiber);
}

function resetHostContainer(){
contextStackCursor.current=NO_CONTEXT;
rootInstanceStackCursor.current=NO_CONTEXT;
}

return{
getHostContext:getHostContext,
getRootHostContainer:getRootHostContainer,
popHostContainer:popHostContainer,
popHostContext:popHostContext,
pushHostContainer:pushHostContainer,
pushHostContext:pushHostContext,
resetHostContainer:resetHostContainer};

};