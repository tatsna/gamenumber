/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Slider
 * 
 */
'use strict';var _jsxFileName="/home/perdto/test2/node_modules/react-native/Libraries/Components/Slider/Slider.js";

var Image=require('Image');
var ColorPropType=require('ColorPropType');
var NativeMethodsMixin=require('NativeMethodsMixin');
var ReactNativeViewAttributes=require('ReactNativeViewAttributes');
var Platform=require('Platform');
var React=require('React');
var PropTypes=require('prop-types');
var StyleSheet=require('StyleSheet');
var ViewPropTypes=require('ViewPropTypes');

var requireNativeComponent=require('requireNativeComponent');



/**
 * A component used to select a single value from a range of values.
 */
// $FlowFixMe(>=0.41.0)
var Slider=React.createClass({displayName:"Slider",
mixins:[NativeMethodsMixin],

propTypes:babelHelpers.extends({},
ViewPropTypes,{

/**
     * Used to style and layout the `Slider`.  See `StyleSheet.js` and
     * `ViewStylePropTypes.js` for more info.
     */
style:ViewPropTypes.style,

/**
     * Initial value of the slider. The value should be between minimumValue
     * and maximumValue, which default to 0 and 1 respectively.
     * Default value is 0.
     *
     * *This is not a controlled component*, you don't need to update the
     * value during dragging.
     */
value:PropTypes.number,

/**
     * Step value of the slider. The value should be
     * between 0 and (maximumValue - minimumValue).
     * Default value is 0.
     */
step:PropTypes.number,

/**
     * Initial minimum value of the slider. Default value is 0.
     */
minimumValue:PropTypes.number,

/**
     * Initial maximum value of the slider. Default value is 1.
     */
maximumValue:PropTypes.number,

/**
     * The color used for the track to the left of the button.
     * Overrides the default blue gradient image on iOS.
     */
minimumTrackTintColor:ColorPropType,

/**
     * The color used for the track to the right of the button.
     * Overrides the default blue gradient image on iOS.
     */
maximumTrackTintColor:ColorPropType,

/**
     * If true the user won't be able to move the slider.
     * Default value is false.
     */
disabled:PropTypes.bool,

/**
     * Assigns a single image for the track. Only static images are supported.
     * The center pixel of the image will be stretched to fill the track.
     * @platform ios
     */
trackImage:Image.propTypes.source,

/**
     * Assigns a minimum track image. Only static images are supported. The
     * rightmost pixel of the image will be stretched to fill the track.
     * @platform ios
     */
minimumTrackImage:Image.propTypes.source,

/**
     * Assigns a maximum track image. Only static images are supported. The
     * leftmost pixel of the image will be stretched to fill the track.
     * @platform ios
     */
maximumTrackImage:Image.propTypes.source,

/**
     * Sets an image for the thumb. Only static images are supported.
     * @platform ios
     */
thumbImage:Image.propTypes.source,

/**
     * Color of the foreground switch grip.
     * @platform android
     */
thumbTintColor:ColorPropType,

/**
     * Callback continuously called while the user is dragging the slider.
     */
onValueChange:PropTypes.func,

/**
     * Callback that is called when the user releases the slider,
     * regardless if the value has changed. The current value is passed
     * as an argument to the callback handler.
     */
onSlidingComplete:PropTypes.func,

/**
     * Used to locate this view in UI automation tests.
     */
testID:PropTypes.string}),


getDefaultProps:function getDefaultProps(){
return{
disabled:false,
value:0,
minimumValue:0,
maximumValue:1,
step:0};

},

viewConfig:{
uiViewClassName:'RCTSlider',
validAttributes:babelHelpers.extends({},
ReactNativeViewAttributes.RCTView,{
value:true})},



render:function render(){var _props=
this.props,style=_props.style,onValueChange=_props.onValueChange,onSlidingComplete=_props.onSlidingComplete,props=babelHelpers.objectWithoutProperties(_props,["style","onValueChange","onSlidingComplete"]);
props.style=[styles.slider,style];

props.onValueChange=onValueChange&&function(event){
var userEvent=true;
{
// On Android there's a special flag telling us the user is
// dragging the slider.
userEvent=event.nativeEvent.fromUser;
}
onValueChange&&userEvent&&onValueChange(event.nativeEvent.value);
};

props.onChange=props.onValueChange;

props.onSlidingComplete=onSlidingComplete&&function(event){
onSlidingComplete&&onSlidingComplete(event.nativeEvent.value);
};

return React.createElement(RCTSlider,babelHelpers.extends({},
props,{
enabled:!this.props.disabled,
onStartShouldSetResponder:function onStartShouldSetResponder(){return true;},
onResponderTerminationRequest:function onResponderTerminationRequest(){return false;},__source:{fileName:_jsxFileName,lineNumber:178}}));

}});


var styles=void 0;






{
styles=StyleSheet.create({
slider:{}});

}

var options={};
{
options={
nativeOnly:{
enabled:true}};


}
var RCTSlider=requireNativeComponent('RCTSlider',Slider,options);

module.exports=Slider;