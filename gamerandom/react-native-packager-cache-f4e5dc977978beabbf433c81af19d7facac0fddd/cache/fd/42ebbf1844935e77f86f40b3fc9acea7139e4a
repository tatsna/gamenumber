/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule KeyboardAvoidingView
 * 
 */
'use strict';var _jsxFileName="/home/perdto/test2/node_modules/react-native/Libraries/Components/Keyboard/KeyboardAvoidingView.js";

var Keyboard=require('Keyboard');
var LayoutAnimation=require('LayoutAnimation');
var Platform=require('Platform');
var React=require('React');
var PropTypes=require('prop-types');
var TimerMixin=require('react-timer-mixin');
var View=require('View');
var ViewPropTypes=require('ViewPropTypes');



























var viewRef='VIEW';

/**
 * It is a component to solve the common problem of views that need to move out of the way of the virtual keyboard.
 * It can automatically adjust either its position or bottom padding based on the position of the keyboard.
 */
// $FlowFixMe(>=0.41.0)
var KeyboardAvoidingView=React.createClass({displayName:"KeyboardAvoidingView",
mixins:[TimerMixin],

propTypes:babelHelpers.extends({},
ViewPropTypes,{
behavior:PropTypes.oneOf(['height','position','padding']),

/**
     * The style of the content container(View) when behavior is 'position'.
     */
contentContainerStyle:ViewPropTypes.style,

/**
     * This is the distance between the top of the user screen and the react native view,
     * may be non-zero in some use cases.
     */
keyboardVerticalOffset:PropTypes.number.isRequired}),


getDefaultProps:function getDefaultProps(){
return{
keyboardVerticalOffset:0};

},

getInitialState:function getInitialState(){
return{
bottom:0};

},

subscriptions:[],
frame:null,

relativeKeyboardHeight:function relativeKeyboardHeight(keyboardFrame){
var frame=this.frame;
if(!frame||!keyboardFrame){
return 0;
}

var y1=Math.max(frame.y,keyboardFrame.screenY-this.props.keyboardVerticalOffset);
var y2=Math.min(frame.y+frame.height,keyboardFrame.screenY+keyboardFrame.height-this.props.keyboardVerticalOffset);
if(frame.y>keyboardFrame.screenY){
return frame.y+frame.height-keyboardFrame.screenY-this.props.keyboardVerticalOffset;
}
return Math.max(y2-y1,0);
},

onKeyboardChange:function onKeyboardChange(event){
if(!event){
this.setState({bottom:0});
return;
}var

duration=event.duration,easing=event.easing,endCoordinates=event.endCoordinates;
var height=this.relativeKeyboardHeight(endCoordinates);

if(duration&&easing){
LayoutAnimation.configureNext({
duration:duration,
update:{
duration:duration,
type:LayoutAnimation.Types[easing]||'keyboard'}});


}
this.setState({bottom:height});
},

onLayout:function onLayout(event){
this.frame=event.nativeEvent.layout;
},

componentWillUpdate:function componentWillUpdate(nextProps,nextState,nextContext){
if(nextState.bottom===this.state.bottom&&
this.props.behavior==='height'&&
nextProps.behavior==='height'){
// If the component rerenders without an internal state change, e.g.
// triggered by parent component re-rendering, no need for bottom to change.
nextState.bottom=0;
}
},

componentWillMount:function componentWillMount(){




{
this.subscriptions=[
Keyboard.addListener('keyboardDidHide',this.onKeyboardChange),
Keyboard.addListener('keyboardDidShow',this.onKeyboardChange)];

}
},

componentWillUnmount:function componentWillUnmount(){
this.subscriptions.forEach(function(sub){return sub.remove();});
},

render:function render(){
// $FlowFixMe(>=0.41.0)
var _props=this.props,behavior=_props.behavior,children=_props.children,style=_props.style,props=babelHelpers.objectWithoutProperties(_props,["behavior","children","style"]);

switch(behavior){
case'height':
var heightStyle=void 0;
if(this.frame){
// Note that we only apply a height change when there is keyboard present,
// i.e. this.state.bottom is greater than 0. If we remove that condition,
// this.frame.height will never go back to its original value.
// When height changes, we need to disable flex.
heightStyle={height:this.frame.height-this.state.bottom,flex:0};
}
return(
React.createElement(View,babelHelpers.extends({ref:viewRef,style:[style,heightStyle],onLayout:this.onLayout},props,{__source:{fileName:_jsxFileName,lineNumber:171}}),
children));



case'position':
var positionStyle={bottom:this.state.bottom};var
contentContainerStyle=this.props.contentContainerStyle;

return(
React.createElement(View,babelHelpers.extends({ref:viewRef,style:style,onLayout:this.onLayout},props,{__source:{fileName:_jsxFileName,lineNumber:181}}),
React.createElement(View,{style:[contentContainerStyle,positionStyle],__source:{fileName:_jsxFileName,lineNumber:182}},
children)));




case'padding':
var paddingStyle={paddingBottom:this.state.bottom};
return(
React.createElement(View,babelHelpers.extends({ref:viewRef,style:[style,paddingStyle],onLayout:this.onLayout},props,{__source:{fileName:_jsxFileName,lineNumber:191}}),
children));



default:
return(
React.createElement(View,babelHelpers.extends({ref:viewRef,onLayout:this.onLayout,style:style},props,{__source:{fileName:_jsxFileName,lineNumber:198}}),
children));}



}});


module.exports=KeyboardAvoidingView;