/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SectionList
 * 
 */
'use strict';var _jsxFileName="/home/perdto/test2/node_modules/react-native/Libraries/Lists/SectionList.js";

var MetroListView=require('MetroListView');
var Platform=require('Platform');
var React=require('React');
var VirtualizedSectionList=require('VirtualizedSectionList');










































































































































































var defaultProps=babelHelpers.extends({},
VirtualizedSectionList.defaultProps,{
stickySectionHeadersEnabled:false});




/**
 * A performant interface for rendering sectioned lists, supporting the most handy features:
 *
 *  - Fully cross-platform.
 *  - Configurable viewability callbacks.
 *  - List header support.
 *  - List footer support.
 *  - Item separator support.
 *  - Section header support.
 *  - Section separator support.
 *  - Heterogeneous data and item rendering support.
 *  - Pull to Refresh.
 *  - Scroll loading.
 *
 * If you don't need section support and want a simpler interface, use
 * [`<FlatList>`](/react-native/docs/flatlist.html).
 *
 * Simple Examples:
 *
 *     <SectionList
 *       renderItem={({item}) => <ListItem title={item.title} />}
 *       renderSectionHeader={({section}) => <H1 title={section.title} />}
 *       sections={[ // homogenous rendering between sections
 *         {data: [...], title: ...},
 *         {data: [...], title: ...},
 *         {data: [...], title: ...},
 *       ]}
 *     />
 *
 *     <SectionList
 *       sections={[ // heterogeneous rendering between sections
 *         {data: [...], title: ..., renderItem: ...},
 *         {data: [...], title: ..., renderItem: ...},
 *         {data: [...], title: ..., renderItem: ...},
 *       ]}
 *     />
 *
 * This is a convenience wrapper around [`<VirtualizedList>`](docs/virtualizedlist.html),
 * and thus inherits it's props (as well as those of `ScrollView`) that aren't explicitly listed
 * here, along with the following caveats:
 *
 * - Internal state is not preserved when content scrolls out of the render window. Make sure all
 *   your data is captured in the item data or external stores like Flux, Redux, or Relay.
 * - This is a `PureComponent` which means that it will not re-render if `props` remain shallow-
 *   equal. Make sure that everything your `renderItem` function depends on is passed as a prop
 *   (e.g. `extraData`) that is not `===` after updates, otherwise your UI may not update on
 *   changes. This includes the `data` prop and parent component state.
 * - In order to constrain memory and enable smooth scrolling, content is rendered asynchronously
 *   offscreen. This means it's possible to scroll faster than the fill rate ands momentarily see
 *   blank content. This is a tradeoff that can be adjusted to suit the needs of each application,
 *   and we are working on improving it behind the scenes.
 * - By default, the list looks for a `key` prop on each item and uses that for the React key.
 *   Alternatively, you can provide a custom `keyExtractor` prop.
 *
 */var
SectionList=function(_React$PureComponent){babelHelpers.inherits(SectionList,_React$PureComponent);function SectionList(){var _ref;var _temp,_this,_ret;babelHelpers.classCallCheck(this,SectionList);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return _ret=(_temp=(_this=babelHelpers.possibleConstructorReturn(this,(_ref=SectionList.__proto__||Object.getPrototypeOf(SectionList)).call.apply(_ref,[this].concat(args))),_this),_this.


























































_captureRef=function(ref){_this._wrapperListRef=ref;},_temp),babelHelpers.possibleConstructorReturn(_this,_ret);}babelHelpers.createClass(SectionList,[{key:"scrollToLocation",/**
   * Scrolls to the item at the specified `sectionIndex` and `itemIndex` (within the section)
   * positioned in the viewable area such that `viewPosition` 0 places it at the top (and may be
   * covered by a sticky header), 1 at the bottom, and 0.5 centered in the middle. `viewOffset` is a
   * fixed number of pixels to offset the final target position, e.g. to compensate for sticky
   * headers.
   *
   * Note: cannot scroll to locations outside the render window without specifying the
   * `getItemLayout` prop.
   */value:function scrollToLocation(params){this._wrapperListRef.scrollToLocation(params);}/**
   * Tells the list an interaction has occured, which should trigger viewability calculations, e.g.
   * if `waitForInteractions` is true and the user has not scrolled. This is typically called by
   * taps on items or by navigation actions.
   */},{key:"recordInteraction",value:function recordInteraction(){var listRef=this._wrapperListRef&&this._wrapperListRef.getListRef();listRef&&listRef.recordInteraction();}/**
   * Provides a handle to the underlying scroll responder.
   */},{key:"getScrollResponder",value:function getScrollResponder(){var listRef=this._wrapperListRef&&this._wrapperListRef.getListRef();if(listRef){return listRef.getScrollResponder();}}},{key:"getScrollableNode",value:function getScrollableNode(){var listRef=this._wrapperListRef&&this._wrapperListRef.getListRef();if(listRef){return listRef.getScrollableNode();}}},{key:"render",value:function render(){var List=this.props.legacyImplementation?MetroListView:VirtualizedSectionList;return React.createElement(List,babelHelpers.extends({},this.props,{ref:this._captureRef,__source:{fileName:_jsxFileName,lineNumber:305}}));}}]);return SectionList;}(React.PureComponent);SectionList.defaultProps=defaultProps;module.exports=SectionList;