/**
 * Copyright (c) 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Promise
 * 
 */
'use strict';

var Promise=require('fbjs/lib/Promise.native');

var prettyFormat=require('pretty-format');

{
require('promise/setimmediate/rejection-tracking').enable({
allRejections:true,
onUnhandled:function onUnhandled(id){var error=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};
var message=void 0;
var stack=void 0;

var stringValue=Object.prototype.toString.call(error);
if(stringValue==='[object Error]'){
message=Error.prototype.toString.call(error);
stack=error.stack;
}else{
message=prettyFormat(error);
}

var warning=
"Possible Unhandled Promise Rejection (id: "+id+"):\n"+(
message+"\n")+(
stack==null?'':stack);
console.warn(warning);
},
onHandled:function onHandled(id){
var warning=
"Promise Rejection Handled (id: "+id+")\n"+
'This means you can ignore any previous messages of the form '+("\"Possible Unhandled Promise Rejection (id: "+
id+"):\"");
console.warn(warning);
}});

}

module.exports=Promise;