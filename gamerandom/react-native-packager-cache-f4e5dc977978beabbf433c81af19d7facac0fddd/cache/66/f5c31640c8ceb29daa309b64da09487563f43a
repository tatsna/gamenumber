/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule FlatList
 * 
 */
'use strict';var _jsxFileName="/home/perdto/test2/node_modules/react-native/Libraries/Lists/FlatList.js";

var MetroListView=require('MetroListView');// Used as a fallback legacy option
var React=require('React');
var View=require('View');
var VirtualizedList=require('VirtualizedList');

var invariant=require('fbjs/lib/invariant');




































































































































































var defaultProps=babelHelpers.extends({},
VirtualizedList.defaultProps,{
numColumns:1});



/**
 * A performant interface for rendering simple, flat lists, supporting the most handy features:
 *
 *  - Fully cross-platform.
 *  - Optional horizontal mode.
 *  - Configurable viewability callbacks.
 *  - Header support.
 *  - Footer support.
 *  - Separator support.
 *  - Pull to Refresh.
 *  - Scroll loading.
 *  - ScrollToIndex support.
 *
 * If you need section support, use [`<SectionList>`](docs/sectionlist.html).
 *
 * Minimal Example:
 *
 *     <FlatList
 *       data={[{key: 'a'}, {key: 'b'}]}
 *       renderItem={({item}) => <Text>{item.key}</Text>}
 *     />
 *
 * More complex example demonstrating `PureComponent` usage for perf optimization and avoiding bugs.
 *
 * - By binding the `onPressItem` handler, the props will remain `===` and `PureComponent` will
 *   prevent wasteful re-renders unless the actual `id`, `selected`, or `title` props change, even
 *   if the inner `SomeOtherWidget` has no such optimizations.
 * - By passing `extraData={this.state}` to `FlatList` we make sure `FlatList` itself will re-render
 *   when the `state.selected` changes. Without setting this prop, `FlatList` would not know it
 *   needs to re-render any items because it is also a `PureComponent` and the prop comparison will
 *   not show any changes.
 * - `keyExtractor` tells the list to use the `id`s for the react keys.
 *
 *
 *     class MyListItem extends React.PureComponent {
 *       _onPress = () => {
 *         this.props.onPressItem(this.props.id);
 *       };
 *
 *       render() {
 *         return (
 *           <SomeOtherWidget
 *             {...this.props}
 *             onPress={this._onPress}
 *           />
 *         )
 *       }
 *     }
 *
 *     class MyList extends React.PureComponent {
 *       state = {selected: (new Map(): Map<string, boolean>)};
 *
 *       _keyExtractor = (item, index) => item.id;
 *
 *       _onPressItem = (id: string) => {
 *         // updater functions are preferred for transactional updates
 *         this.setState((state) => {
 *           // copy the map rather than modifying state.
 *           const selected = new Map(state.selected);
 *           selected.set(id, !selected.get(id)); // toggle
 *           return {selected};
 *         });
 *       };
 *
 *       _renderItem = ({item}) => (
 *         <MyListItem
 *           id={item.id}
 *           onPressItem={this._onPressItem}
 *           selected={!!this.state.selected.get(item.id)}
 *           title={item.title}
 *         />
 *       );
 *
 *       render() {
 *         return (
 *           <FlatList
 *             data={this.props.data}
 *             extraData={this.state}
 *             keyExtractor={this._keyExtractor}
 *             renderItem={this._renderItem}
 *           />
 *         );
 *       }
 *     }
 *
 * This is a convenience wrapper around [`<VirtualizedList>`](docs/virtualizedlist.html),
 * and thus inherits it's props (as well as those of `ScrollView`) that aren't explicitly listed
 * here, along with the following caveats:
 *
 * - Internal state is not preserved when content scrolls out of the render window. Make sure all
 *   your data is captured in the item data or external stores like Flux, Redux, or Relay.
 * - This is a `PureComponent` which means that it will not re-render if `props` remain shallow-
 *   equal. Make sure that everything your `renderItem` function depends on is passed as a prop
 *   (e.g. `extraData`) that is not `===` after updates, otherwise your UI may not update on
 *   changes. This includes the `data` prop and parent component state.
 * - In order to constrain memory and enable smooth scrolling, content is rendered asynchronously
 *   offscreen. This means it's possible to scroll faster than the fill rate ands momentarily see
 *   blank content. This is a tradeoff that can be adjusted to suit the needs of each application,
 *   and we are working on improving it behind the scenes.
 * - By default, the list looks for a `key` prop on each item and uses that for the React key.
 *   Alternatively, you can provide a custom `keyExtractor` prop.
 *
 */var
FlatList=function(_React$PureComponent){babelHelpers.inherits(FlatList,_React$PureComponent);function FlatList(){var _ref;var _temp,_this,_ret;babelHelpers.classCallCheck(this,FlatList);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return _ret=(_temp=(_this=babelHelpers.possibleConstructorReturn(this,(_ref=FlatList.__proto__||Object.getPrototypeOf(FlatList)).call.apply(_ref,[this].concat(args))),_this),_this.













































































_hasWarnedLegacy=false,_this.


_captureRef=function(ref){_this._listRef=ref;},_this.






























_getItem=function(data,index){var
numColumns=_this.props.numColumns;
if(numColumns>1){
var ret=[];
for(var kk=0;kk<numColumns;kk++){
var _item=data[index*numColumns+kk];
_item&&ret.push(_item);
}
return ret;
}else{
return data[index];
}
},_this.

_getItemCount=function(data){
return data?Math.ceil(data.length/_this.props.numColumns):0;
},_this.

_keyExtractor=function(items,index){var _this$props=
_this.props,keyExtractor=_this$props.keyExtractor,numColumns=_this$props.numColumns;
if(numColumns>1){
invariant(
Array.isArray(items),"FlatList: Encountered internal consistency error, expected each item to consist of an array with 1-%s columns; instead, received a single item.",


numColumns);

return items.map(function(it,kk){return keyExtractor(it,index*numColumns+kk);}).join(':');
}else{
return keyExtractor(items,index);
}
},_this.










_onViewableItemsChanged=function(info){var _this$props2=
_this.props,numColumns=_this$props2.numColumns,onViewableItemsChanged=_this$props2.onViewableItemsChanged;
if(!onViewableItemsChanged){
return;
}
if(numColumns>1){
var _changed=[];
var _viewableItems=[];
info.viewableItems.forEach(function(v){return _this._pushMultiColumnViewable(_viewableItems,v);});
info.changed.forEach(function(v){return _this._pushMultiColumnViewable(_changed,v);});
onViewableItemsChanged({viewableItems:_viewableItems,changed:_changed});
}else{
onViewableItemsChanged(info);
}
},_this.

_renderItem=function(info){var _this$props3=
_this.props,renderItem=_this$props3.renderItem,numColumns=_this$props3.numColumns,columnWrapperStyle=_this$props3.columnWrapperStyle;
if(numColumns>1){var
_item2=info.item,_index=info.index;
invariant(Array.isArray(_item2),'Expected array of items with numColumns > 1');
return(
React.createElement(View,{style:[{flexDirection:'row'},columnWrapperStyle],__source:{fileName:_jsxFileName,lineNumber:469}},
_item2.map(function(it,kk){
var element=renderItem({
item:it,
index:_index*numColumns+kk,
separators:info.separators});

return element&&React.cloneElement(element,{key:kk});
})));


}else{
return renderItem(info);
}
},_temp),babelHelpers.possibleConstructorReturn(_this,_ret);}babelHelpers.createClass(FlatList,[{key:"scrollToEnd",/**
   * Scrolls to the end of the content. May be janky without `getItemLayout` prop.
   */value:function scrollToEnd(params){this._listRef.scrollToEnd(params);}/**
   * Scrolls to the item at a the specified index such that it is positioned in the viewable area
   * such that `viewPosition` 0 places it at the top, 1 at the bottom, and 0.5 centered in the
   * middle. `viewOffset` is a fixed number of pixels to offset the final target position.
   *
   * Note: cannot scroll to locations outside the render window without specifying the
   * `getItemLayout` prop.
   */},{key:"scrollToIndex",value:function scrollToIndex(params){this._listRef.scrollToIndex(params);}/**
   * Requires linear scan through data - use `scrollToIndex` instead if possible.
   *
   * Note: cannot scroll to locations outside the render window without specifying the
   * `getItemLayout` prop.
   */},{key:"scrollToItem",value:function scrollToItem(params){this._listRef.scrollToItem(params);}/**
   * Scroll to a specific content pixel offset, like a normal `ScrollView`.
   */},{key:"scrollToOffset",value:function scrollToOffset(params){this._listRef.scrollToOffset(params);}/**
   * Tells the list an interaction has occured, which should trigger viewability calculations, e.g.
   * if `waitForInteractions` is true and the user has not scrolled. This is typically called by
   * taps on items or by navigation actions.
   */},{key:"recordInteraction",value:function recordInteraction(){this._listRef.recordInteraction();}/**
   * Provides a handle to the underlying scroll responder.
   */},{key:"getScrollResponder",value:function getScrollResponder(){if(this._listRef){return this._listRef.getScrollResponder();}}},{key:"getScrollableNode",value:function getScrollableNode(){if(this._listRef){return this._listRef.getScrollableNode();}}},{key:"componentWillMount",value:function componentWillMount(){this._checkProps(this.props);}},{key:"componentWillReceiveProps",value:function componentWillReceiveProps(nextProps){invariant(nextProps.numColumns===this.props.numColumns,"Changing numColumns on the fly is not supported. Change the key prop on FlatList when changing the number of columns to force a fresh render of the component.");this._checkProps(nextProps);}},{key:"_checkProps",value:function _checkProps(props){var getItem=props.getItem,getItemCount=props.getItemCount,horizontal=props.horizontal,legacyImplementation=props.legacyImplementation,numColumns=props.numColumns,columnWrapperStyle=props.columnWrapperStyle;invariant(!getItem&&!getItemCount,'FlatList does not support custom data formats.');if(numColumns>1){invariant(!horizontal,'numColumns does not support horizontal.');}else{invariant(!columnWrapperStyle,'columnWrapperStyle not supported for single column lists');}if(legacyImplementation){invariant(numColumns===1,'Legacy list does not support multiple columns.');// Warning: may not have full feature parity and is meant more for debugging and performance
// comparison.
if(!this._hasWarnedLegacy){console.warn("FlatList: Using legacyImplementation - some features not supported and performance may suffer");this._hasWarnedLegacy=true;}}}},{key:"_pushMultiColumnViewable",value:function _pushMultiColumnViewable(arr,v){var _props=this.props,numColumns=_props.numColumns,keyExtractor=_props.keyExtractor;v.item.forEach(function(item,ii){invariant(v.index!=null,'Missing index!');var index=v.index*numColumns+ii;arr.push(babelHelpers.extends({},v,{item:item,key:keyExtractor(item,index),index:index}));});}},{key:"render",value:function render(){if(this.props.legacyImplementation){return React.createElement(MetroListView,babelHelpers.extends({},this.props,{items:this.props.data,ref:this._captureRef,__source:{fileName:_jsxFileName,lineNumber:487}}));}else{return React.createElement(VirtualizedList,babelHelpers.extends({},this.props,{renderItem:this._renderItem,getItem:this._getItem,getItemCount:this._getItemCount,keyExtractor:this._keyExtractor,ref:this._captureRef,onViewableItemsChanged:this.props.onViewableItemsChanged&&this._onViewableItemsChanged,__source:{fileName:_jsxFileName,lineNumber:490}}));}}}]);return FlatList;}(React.PureComponent);FlatList.defaultProps=defaultProps;module.exports=FlatList;