/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ScrollViewStickyHeader
 * 
 */
'use strict';var _jsxFileName="/home/perdto/test2/node_modules/react-native/Libraries/Components/ScrollView/ScrollViewStickyHeader.js";

var Animated=require('Animated');
var React=require('React');
var StyleSheet=require('StyleSheet');var








ScrollViewStickyHeader=function(_React$Component){babelHelpers.inherits(ScrollViewStickyHeader,_React$Component);








function ScrollViewStickyHeader(props,context){babelHelpers.classCallCheck(this,ScrollViewStickyHeader);var _this=babelHelpers.possibleConstructorReturn(this,(ScrollViewStickyHeader.__proto__||Object.getPrototypeOf(ScrollViewStickyHeader)).call(this,
props,context));_this.












_onLayout=function(event){
_this.setState({
measured:true,
layoutY:event.nativeEvent.layout.y,
layoutHeight:event.nativeEvent.layout.height});


_this.props.onLayout(event);
var child=React.Children.only(_this.props.children);
if(child.props.onLayout){
child.props.onLayout(event);
}
};_this.state={measured:false,layoutY:0,layoutHeight:0,nextHeaderLayoutY:props.nextHeaderLayoutY};return _this;}babelHelpers.createClass(ScrollViewStickyHeader,[{key:"setNextHeaderY",value:function setNextHeaderY(y){this.setState({nextHeaderLayoutY:y});}},{key:"render",value:function render()

{var _state=
this.state,measured=_state.measured,layoutHeight=_state.layoutHeight,layoutY=_state.layoutY,nextHeaderLayoutY=_state.nextHeaderLayoutY;

var translateY=void 0;
if(measured){
// The interpolation looks like:
// - Negative scroll: no translation
// - From 0 to the y of the header: no translation. This will cause the header
//   to scroll normally until it reaches the top of the scroll view.
// - From header y to when the next header y hits the bottom edge of the header: translate
//   equally to scroll. This will cause the header to stay at the top of the scroll view.
// - Past the collision with the next header y: no more translation. This will cause the
// header to continue scrolling up and make room for the next sticky header.
// In the case that there is no next header just translate equally to
// scroll indefinetly.
var inputRange=[-1,0,layoutY];
var outputRange=[0,0,0];
// Sometimes headers jump around so we make sure we don't violate the monotonic inputRange
// condition.
var collisionPoint=(nextHeaderLayoutY||0)-layoutHeight;
if(collisionPoint>=layoutY){
inputRange.push(collisionPoint,collisionPoint+1);
outputRange.push(collisionPoint-layoutY,collisionPoint-layoutY);
}else{
inputRange.push(layoutY+1);
outputRange.push(1);
}
translateY=this.props.scrollAnimatedValue.interpolate({
inputRange:inputRange,
outputRange:outputRange});

}else{
translateY=0;
}

var child=React.Children.only(this.props.children);

return(
React.createElement(Animated.View,{
collapsable:false,
onLayout:this._onLayout,
style:[child.props.style,styles.header,{transform:[{translateY:translateY}]}],__source:{fileName:_jsxFileName,lineNumber:100}},
React.cloneElement(child,{
style:styles.fill,// We transfer the child style to the wrapper.
onLayout:undefined// we call this manually through our this._onLayout
})));


}}]);return ScrollViewStickyHeader;}(React.Component);


var styles=StyleSheet.create({
header:{
zIndex:10},

fill:{
flex:1}});



module.exports=ScrollViewStickyHeader;