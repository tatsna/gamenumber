/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Switch
 * 
 */
'use strict';var _jsxFileName="/home/perdto/test2/node_modules/react-native/Libraries/Components/Switch/Switch.js";

var ColorPropType=require('ColorPropType');
var NativeMethodsMixin=require('NativeMethodsMixin');
var Platform=require('Platform');
var React=require('React');
var PropTypes=require('prop-types');
var StyleSheet=require('StyleSheet');
var ViewPropTypes=require('ViewPropTypes');

var requireNativeComponent=require('requireNativeComponent');






/**
 * Renders a boolean input.
 *
 * This is a controlled component that requires an `onValueChange` callback that
 * updates the `value` prop in order for the component to reflect user actions.
 * If the `value` prop is not updated, the component will continue to render
 * the supplied `value` prop instead of the expected result of any user actions.
 *
 * @keyword checkbox
 * @keyword toggle
 */
// $FlowFixMe(>=0.41.0)
var Switch=React.createClass({displayName:"Switch",
propTypes:babelHelpers.extends({},
ViewPropTypes,{
/**
     * The value of the switch.  If true the switch will be turned on.
     * Default value is false.
     */
value:PropTypes.bool,
/**
     * If true the user won't be able to toggle the switch.
     * Default value is false.
     */
disabled:PropTypes.bool,
/**
     * Invoked with the new value when the value changes.
     */
onValueChange:PropTypes.func,
/**
     * Used to locate this view in end-to-end tests.
     */
testID:PropTypes.string,

/**
     * Border color on iOS and background color on Android when the switch is turned off.
     */
tintColor:ColorPropType,
/**
     * Background color when the switch is turned on.
     */
onTintColor:ColorPropType,
/**
     * Color of the foreground switch grip.
     */
thumbTintColor:ColorPropType}),


getDefaultProps:function getDefaultProps(){
return{
value:false,
disabled:false};

},

mixins:[NativeMethodsMixin],

_rctSwitch:{},
_onChange:function _onChange(event){
{
this._rctSwitch.setNativeProps({on:this.props.value});
}


//Change the props after the native props are set in case the props change removes the component
this.props.onChange&&this.props.onChange(event);
this.props.onValueChange&&this.props.onValueChange(event.nativeEvent.value);
},

render:function render(){var _this=this;
var props=babelHelpers.extends({},this.props);
props.onStartShouldSetResponder=function(){return true;};
props.onResponderTerminationRequest=function(){return false;};
{
props.enabled=!this.props.disabled;
props.on=this.props.value;
props.style=this.props.style;
props.trackTintColor=this.props.value?this.props.onTintColor:this.props.tintColor;
}


return(
React.createElement(RCTSwitch,babelHelpers.extends({},
props,{
ref:function ref(_ref){_this._rctSwitch=_ref;},
onChange:this._onChange,__source:{fileName:_jsxFileName,lineNumber:111}})));


}});


var styles=StyleSheet.create({
rctSwitchIOS:{
height:31,
width:51}});



{
var RCTSwitch=requireNativeComponent('AndroidSwitch',Switch,{
nativeOnly:{
onChange:true,
on:true,
enabled:true,
trackTintColor:true}});


}







module.exports=Switch;