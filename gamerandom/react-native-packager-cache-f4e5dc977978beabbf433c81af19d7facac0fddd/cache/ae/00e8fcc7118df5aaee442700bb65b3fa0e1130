/**
 * @providesModule Notifications
 */

'use strict';

var RNNotificationsComponent=require('./component');

var AppState=RNNotificationsComponent.state;
var RNNotifications=RNNotificationsComponent.component;

var Platform=require('react-native').Platform;

var Notifications={
handler:RNNotifications,
onRegister:false,
onError:false,
onNotification:false,
onRemoteFetch:false,
isLoaded:false,
hasPoppedInitialNotification:false,

isPermissionsRequestPending:false,

permissions:{
alert:true,
badge:true,
sound:true}};



Notifications.callNative=function(name,params){
if(typeof this.handler[name]==='function'){var _handler;
if(typeof params!=='array'&&
typeof params!=='object'){
params=[];
}

return(_handler=this.handler)[name].apply(_handler,babelHelpers.toConsumableArray(params));
}else{
return null;
}
};

/**
 * Configure local and remote notifications
 * @param {Object}		options
 * @param {function}	options.onRegister - Fired when the user registers for remote notifications.
 * @param {function}	options.onNotification - Fired when a remote notification is received.
 * @param {function} 	options.onError - None
 * @param {Object}		options.permissions - Permissions list
 * @param {Boolean}		options.requestPermissions - Check permissions when register
 */
Notifications.configure=function(options){
if(typeof options.onRegister!=='undefined'){
this.onRegister=options.onRegister;
}

if(typeof options.onError!=='undefined'){
this.onError=options.onError;
}

if(typeof options.onNotification!=='undefined'){
this.onNotification=options.onNotification;
}

if(typeof options.permissions!=='undefined'){
this.permissions=options.permissions;
}

if(typeof options.senderID!=='undefined'){
this.senderID=options.senderID;
}

if(typeof options.onRemoteFetch!=='undefined'){
this.onRemoteFetch=options.onRemoteFetch;
}

if(this.isLoaded===false){
this._onRegister=this._onRegister.bind(this);
this._onNotification=this._onNotification.bind(this);
this._onRemoteFetch=this._onRemoteFetch.bind(this);
this.callNative('addEventListener',['register',this._onRegister]);
this.callNative('addEventListener',['notification',this._onNotification]);
this.callNative('addEventListener',['localNotification',this._onNotification]);
this.callNative('addEventListener',['remoteFetch',this._onRemoteFetch]);

this.isLoaded=true;
}

if(this.hasPoppedInitialNotification===false&&(
options.popInitialNotification===undefined||options.popInitialNotification===true)){
this.popInitialNotification(function(firstNotification){
if(firstNotification!==null){
this._onNotification(firstNotification,true);
}
}.bind(this));
this.hasPoppedInitialNotification=true;
}

if(options.requestPermissions!==false){
this._requestPermissions();
}

};

/* Unregister */
Notifications.unregister=function(){
this.callNative('removeEventListener',['register',this._onRegister]);
this.callNative('removeEventListener',['notification',this._onNotification]);
this.callNative('removeEventListener',['localNotification',this._onNotification]);
this.callNative('removeEventListener',['remoteFetch',this._onRemoteFetch]);
this.isLoaded=false;
};

/**
 * Local Notifications
 * @param {Object}		details
 * @param {String}		details.message - The message displayed in the notification alert.
 * @param {String}		details.title  -  ANDROID ONLY: The title displayed in the notification alert.
 * @param {String}		details.ticker -  ANDROID ONLY: The ticker displayed in the status bar.
 * @param {Object}		details.userInfo -  iOS ONLY: The userInfo used in the notification alert.
 */
Notifications.localNotification=function(details){





















{
this.handler.presentLocalNotification(details);
}
};

/**
 * Local Notifications Schedule
 * @param {Object}		details (same as localNotification)
 * @param {Date}		details.date - The date and time when the system should deliver the notification
 */
Notifications.localNotificationSchedule=function(details){




















{
details.fireDate=details.date.getTime();
delete details.date;
// ignore iOS only repeatType
if(['year','month'].includes(details.repeatType)){
delete details.repeatType;
}
this.handler.scheduleLocalNotification(details);
}
};

/* Internal Functions */
Notifications._onRegister=function(token){
if(this.onRegister!==false){
this.onRegister({
token:token,
os:"android"});

}
};

Notifications._onRemoteFetch=function(notificationData){
if(this.onRemoteFetch!==false){
this.onRemoteFetch(notificationData);
}
};

Notifications._onNotification=function(data){var isFromBackground=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;
if(isFromBackground===null){
isFromBackground=
data.foreground===false||
AppState.currentState==='background';

}

if(this.onNotification!==false){










{
var notificationData=babelHelpers.extends({
foreground:!isFromBackground},
data);


if(typeof notificationData.data==='string'){
try{
notificationData.data=JSON.parse(notificationData.data);
}catch(e){
/* void */
}
}

this.onNotification(notificationData);
}
}
};

/* onResultPermissionResult */
Notifications._onPermissionResult=function(){
this.isPermissionsRequestPending=false;
};

// Prevent requestPermissions called twice if ios result is pending
Notifications._requestPermissions=function(){







if(typeof this.senderID!=='undefined'){
return this.callNative('requestPermissions',[this.senderID]);
}
};

// Stock requestPermissions function
Notifications.requestPermissions=function(){


if(typeof this.senderID!=='undefined'){
return this.callNative('requestPermissions',[this.senderID]);
}
};

/* Fallback functions */
Notifications.presentLocalNotification=function(){
return this.callNative('presentLocalNotification',arguments);
};

Notifications.scheduleLocalNotification=function(){
return this.callNative('scheduleLocalNotification',arguments);
};

Notifications.cancelLocalNotifications=function(){
return this.callNative('cancelLocalNotifications',arguments);
};

Notifications.cancelAllLocalNotifications=function(){
return this.callNative('cancelAllLocalNotifications',arguments);
};

Notifications.setApplicationIconBadgeNumber=function(){
return this.callNative('setApplicationIconBadgeNumber',arguments);
};

Notifications.getApplicationIconBadgeNumber=function(){
return this.callNative('getApplicationIconBadgeNumber',arguments);
};

Notifications.popInitialNotification=function(handler){
this.callNative('getInitialNotification').then(function(result){
handler(result);
});
};

Notifications.abandonPermissions=function(){
return this.callNative('abandonPermissions',arguments);
};

Notifications.checkPermissions=function(){
return this.callNative('checkPermissions',arguments);
};

Notifications.registerNotificationActions=function(){
return this.callNative('registerNotificationActions',arguments);
};

Notifications.clearAllNotifications=function(){
// Only available for Android
return this.callNative('clearAllNotifications',arguments);
};

module.exports=Notifications;