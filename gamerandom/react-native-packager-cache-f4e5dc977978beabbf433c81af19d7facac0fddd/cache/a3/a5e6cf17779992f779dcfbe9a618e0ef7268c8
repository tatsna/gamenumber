/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule RefreshControl
 * 
 */
'use strict';var _jsxFileName="/home/perdto/test2/node_modules/react-native/Libraries/Components/RefreshControl/RefreshControl.js";

var ColorPropType=require('ColorPropType');
var NativeMethodsMixin=require('NativeMethodsMixin');
var Platform=require('Platform');
var React=require('React');
var PropTypes=require('prop-types');
var ViewPropTypes=require('ViewPropTypes');

var requireNativeComponent=require('requireNativeComponent');

{
var RefreshLayoutConsts=require('UIManager').AndroidSwipeRefreshLayout.Constants;
}



/**
 * This component is used inside a ScrollView or ListView to add pull to refresh
 * functionality. When the ScrollView is at `scrollY: 0`, swiping down
 * triggers an `onRefresh` event.
 *
 * ### Usage example
 *
 * ``` js
 * class RefreshableList extends Component {
 *   constructor(props) {
 *     super(props);
 *     this.state = {
 *       refreshing: false,
 *     };
 *   }
 *
 *   _onRefresh() {
 *     this.setState({refreshing: true});
 *     fetchData().then(() => {
 *       this.setState({refreshing: false});
 *     });
 *   }
 *
 *   render() {
 *     return (
 *       <ListView
 *         refreshControl={
 *           <RefreshControl
 *             refreshing={this.state.refreshing}
 *             onRefresh={this._onRefresh.bind(this)}
 *           />
 *         }
 *         ...
 *       >
 *       ...
 *       </ListView>
 *     );
 *   }
 *   ...
 * }
 * ```
 *
 * __Note:__ `refreshing` is a controlled prop, this is why it needs to be set to true
 * in the `onRefresh` function otherwise the refresh indicator will stop immediately.
 */
// $FlowFixMe(>=0.41.0)
var RefreshControl=React.createClass({displayName:"RefreshControl",
statics:{
SIZE:RefreshLayoutConsts.SIZE},


mixins:[NativeMethodsMixin],

propTypes:babelHelpers.extends({},
ViewPropTypes,{
/**
     * Called when the view starts refreshing.
     */
onRefresh:PropTypes.func,
/**
     * Whether the view should be indicating an active refresh.
     */
refreshing:PropTypes.bool.isRequired,
/**
     * The color of the refresh indicator.
     * @platform ios
     */
tintColor:ColorPropType,
/**
     * Title color.
     * @platform ios
     */
titleColor:ColorPropType,
/**
     * The title displayed under the refresh indicator.
     * @platform ios
     */
title:PropTypes.string,
/**
     * Whether the pull to refresh functionality is enabled.
     * @platform android
     */
enabled:PropTypes.bool,
/**
     * The colors (at least one) that will be used to draw the refresh indicator.
     * @platform android
     */
colors:PropTypes.arrayOf(ColorPropType),
/**
     * The background color of the refresh indicator.
     * @platform android
     */
progressBackgroundColor:ColorPropType,
/**
     * Size of the refresh indicator, see RefreshControl.SIZE.
     * @platform android
     */
size:PropTypes.oneOf([RefreshLayoutConsts.SIZE.DEFAULT,RefreshLayoutConsts.SIZE.LARGE]),
/**
     * Progress view top offset
     * @platform android
     */
progressViewOffset:PropTypes.number}),


_nativeRef:null,
_lastNativeRefreshing:false,

componentDidMount:function componentDidMount(){
this._lastNativeRefreshing=this.props.refreshing;
},

componentDidUpdate:function componentDidUpdate(prevProps){
// RefreshControl is a controlled component so if the native refreshing
// value doesn't match the current js refreshing prop update it to
// the js value.
if(this.props.refreshing!==prevProps.refreshing){
this._lastNativeRefreshing=this.props.refreshing;
}else if(this.props.refreshing!==this._lastNativeRefreshing){
this._nativeRef.setNativeProps({refreshing:this.props.refreshing});
this._lastNativeRefreshing=this.props.refreshing;
}
},

render:function render(){var _this=this;
return(
React.createElement(NativeRefreshControl,babelHelpers.extends({},
this.props,{
ref:function ref(_ref){_this._nativeRef=_ref;},
onRefresh:this._onRefresh,__source:{fileName:_jsxFileName,lineNumber:155}})));


},

_onRefresh:function _onRefresh(){
this._lastNativeRefreshing=true;

this.props.onRefresh&&this.props.onRefresh();

// The native component will start refreshing so force an update to
// make sure it stays in sync with the js component.
this.forceUpdate();
}});







{
var NativeRefreshControl=requireNativeComponent(
'AndroidSwipeRefreshLayout',
RefreshControl);

}

module.exports=RefreshControl;