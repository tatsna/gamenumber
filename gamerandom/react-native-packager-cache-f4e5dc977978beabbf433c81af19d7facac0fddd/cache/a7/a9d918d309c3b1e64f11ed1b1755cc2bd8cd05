/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule AssetSourceResolver
 * 
 */
'use strict';











var PixelRatio=require('PixelRatio');
var Platform=require('Platform');

var assetPathUtils=require('../../local-cli/bundle/assetPathUtils');
var invariant=require('fbjs/lib/invariant');

/**
 * Returns a path like 'assets/AwesomeModule/icon@2x.png'
 */
function getScaledAssetPath(asset){
var scale=AssetSourceResolver.pickScale(asset.scales,PixelRatio.get());
var scaleSuffix=scale===1?'':'@'+scale+'x';
var assetDir=assetPathUtils.getBasePath(asset);
return assetDir+'/'+asset.name+scaleSuffix+'.'+asset.type;
}

/**
 * Returns a path like 'drawable-mdpi/icon.png'
 */
function getAssetPathInDrawableFolder(asset){
var scale=AssetSourceResolver.pickScale(asset.scales,PixelRatio.get());
var drawbleFolder=assetPathUtils.getAndroidDrawableFolderName(asset,scale);
var fileName=assetPathUtils.getAndroidResourceIdentifier(asset);
return drawbleFolder+'/'+fileName+'.'+asset.type;
}var

AssetSourceResolver=function(){


// where the bundle is being run from




function AssetSourceResolver(serverUrl,bundlePath,asset){babelHelpers.classCallCheck(this,AssetSourceResolver);
this.serverUrl=serverUrl;
this.bundlePath=bundlePath;
this.asset=asset;
}// the asset to resolve
babelHelpers.createClass(AssetSourceResolver,[{key:"isLoadedFromServer",value:function isLoadedFromServer()
{
return!!this.serverUrl;
}},{key:"isLoadedFromFileSystem",value:function isLoadedFromFileSystem()

{
return!!this.bundlePath;
}},{key:"defaultAsset",value:function defaultAsset()

{
if(this.isLoadedFromServer()){
return this.assetServerURL();
}

{
return this.isLoadedFromFileSystem()?
this.drawableFolderInBundle():
this.resourceIdentifierWithoutScale();
}


}

/**
   * Returns an absolute URL which can be used to fetch the asset
   * from the devserver
   */},{key:"assetServerURL",value:function assetServerURL()
{
invariant(!!this.serverUrl,'need server to load from');
return this.fromSource(
this.serverUrl+getScaledAssetPath(this.asset)+
'?platform='+"android"+'&hash='+this.asset.hash);

}

/**
   * Resolves to just the scaled asset filename
   * E.g. 'assets/AwesomeModule/icon@2x.png'
   */},{key:"scaledAssetPath",value:function scaledAssetPath()
{
return this.fromSource(getScaledAssetPath(this.asset));
}

/**
   * Resolves to where the bundle is running from, with a scaled asset filename
   * E.g. '/sdcard/bundle/assets/AwesomeModule/icon@2x.png'
   */},{key:"scaledAssetPathInBundle",value:function scaledAssetPathInBundle()
{
var path=this.bundlePath||'';
return this.fromSource(path+getScaledAssetPath(this.asset));
}

/**
   * The default location of assets bundled with the app, located by
   * resource identifier
   * The Android resource system picks the correct scale.
   * E.g. 'assets_awesomemodule_icon'
   */},{key:"resourceIdentifierWithoutScale",value:function resourceIdentifierWithoutScale()
{
invariant(true,'resource identifiers work on Android');
return this.fromSource(assetPathUtils.getAndroidResourceIdentifier(this.asset));
}

/**
   * If the jsbundle is running from a sideload location, this resolves assets
   * relative to its location
   * E.g. 'file:///sdcard/AwesomeModule/drawable-mdpi/icon.png'
   */},{key:"drawableFolderInBundle",value:function drawableFolderInBundle()
{
var path=this.bundlePath||'';
return this.fromSource(
'file://'+path+getAssetPathInDrawableFolder(this.asset));

}},{key:"fromSource",value:function fromSource(

source){
return{
__packager_asset:true,
width:this.asset.width,
height:this.asset.height,
uri:source,
scale:AssetSourceResolver.pickScale(this.asset.scales,PixelRatio.get())};

}}],[{key:"pickScale",value:function pickScale(

scales,deviceScale){
// Packager guarantees that `scales` array is sorted
for(var i=0;i<scales.length;i++){
if(scales[i]>=deviceScale){
return scales[i];
}
}

// If nothing matches, device scale is larger than any available
// scales, so we return the biggest one. Unless the array is empty,
// in which case we default to 1
return scales[scales.length-1]||1;
}}]);return AssetSourceResolver;}();



module.exports=AssetSourceResolver;