/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DocumentSelectionState
 * @typechecks
 */

'use strict';

var mixInEventEmitter=require('mixInEventEmitter');

/**
 * DocumentSelectionState is responsible for maintaining selection information
 * for a document.
 *
 * It is intended for use by AbstractTextEditor-based components for
 * identifying the appropriate start/end positions to modify the
 * DocumentContent, and for programatically setting browser selection when
 * components re-render.
 */var
DocumentSelectionState=function(){
/**
   * @param {number} anchor
   * @param {number} focus
   */
function DocumentSelectionState(anchor,focus){babelHelpers.classCallCheck(this,DocumentSelectionState);
this._anchorOffset=anchor;
this._focusOffset=focus;
this._hasFocus=false;
}

/**
   * Apply an update to the state. If either offset value has changed,
   * set the values and emit the `change` event. Otherwise no-op.
   *
   * @param {number} anchor
   * @param {number} focus
   */babelHelpers.createClass(DocumentSelectionState,[{key:"update",value:function update(
anchor,focus){
if(this._anchorOffset!==anchor||this._focusOffset!==focus){
this._anchorOffset=anchor;
this._focusOffset=focus;
this.emit('update');
}
}

/**
   * Given a max text length, constrain our selection offsets to ensure
   * that the selection remains strictly within the text range.
   *
   * @param {number} maxLength
   */},{key:"constrainLength",value:function constrainLength(
maxLength){
this.update(
Math.min(this._anchorOffset,maxLength),
Math.min(this._focusOffset,maxLength));

}},{key:"focus",value:function focus()

{
if(!this._hasFocus){
this._hasFocus=true;
this.emit('focus');
}
}},{key:"blur",value:function blur()

{
if(this._hasFocus){
this._hasFocus=false;
this.emit('blur');
}
}

/**
   * @return {boolean}
   */},{key:"hasFocus",value:function hasFocus()
{
return this._hasFocus;
}

/**
   * @return {boolean}
   */},{key:"isCollapsed",value:function isCollapsed()
{
return this._anchorOffset===this._focusOffset;
}

/**
   * @return {boolean}
   */},{key:"isBackward",value:function isBackward()
{
return this._anchorOffset>this._focusOffset;
}

/**
   * @return {?number}
   */},{key:"getAnchorOffset",value:function getAnchorOffset()
{
return this._hasFocus?this._anchorOffset:null;
}

/**
   * @return {?number}
   */},{key:"getFocusOffset",value:function getFocusOffset()
{
return this._hasFocus?this._focusOffset:null;
}

/**
   * @return {?number}
   */},{key:"getStartOffset",value:function getStartOffset()
{
return(
this._hasFocus?Math.min(this._anchorOffset,this._focusOffset):null);

}

/**
   * @return {?number}
   */},{key:"getEndOffset",value:function getEndOffset()
{
return(
this._hasFocus?Math.max(this._anchorOffset,this._focusOffset):null);

}

/**
   * @param {number} start
   * @param {number} end
   * @return {boolean}
   */},{key:"overlaps",value:function overlaps(
start,end){
return(
this.hasFocus()&&
this.getStartOffset()<=end&&start<=this.getEndOffset());

}}]);return DocumentSelectionState;}();


mixInEventEmitter(DocumentSelectionState,{
'blur':true,
'focus':true,
'update':true});


module.exports=DocumentSelectionState;