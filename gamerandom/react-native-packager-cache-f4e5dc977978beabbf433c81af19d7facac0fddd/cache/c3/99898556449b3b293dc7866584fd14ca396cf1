/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule RCTNetworking
 * 
 */
'use strict';

// Do not require the native RCTNetworking module directly! Use this wrapper module instead.
// It will add the necessary requestId, so that you don't have to generate it yourself.
var FormData=require('FormData');
var NativeEventEmitter=require('NativeEventEmitter');
var RCTNetworkingNative=require('NativeModules').Networking;
var convertRequestBody=require('convertRequestBody');





// Convert FormData headers to arrays, which are easier to consume in
// native on Android.
function convertHeadersMapToArray(headers){
var headerArray=[];
for(var name in headers){
headerArray.push([name,headers[name]]);
}
return headerArray;
}

var _requestId=1;
function generateRequestId(){
return _requestId++;
}

/**
 * This class is a wrapper around the native RCTNetworking module. It adds a necessary unique
 * requestId to each network request that can be used to abort that request later on.
 */var
RCTNetworking=function(_NativeEventEmitter){babelHelpers.inherits(RCTNetworking,_NativeEventEmitter);

function RCTNetworking(){babelHelpers.classCallCheck(this,RCTNetworking);return babelHelpers.possibleConstructorReturn(this,(RCTNetworking.__proto__||Object.getPrototypeOf(RCTNetworking)).call(this,
RCTNetworkingNative));
}babelHelpers.createClass(RCTNetworking,[{key:"sendRequest",value:function sendRequest(


method,
trackingName,
url,
headers,
data,
responseType,
incrementalUpdates,
timeout,
callback,
withCredentials)
{
var body=convertRequestBody(data);
if(body&&body.formData){
body.formData=body.formData.map(function(part){return babelHelpers.extends({},
part,{
headers:convertHeadersMapToArray(part.headers)});});

}
var requestId=generateRequestId();
RCTNetworkingNative.sendRequest(
method,
url,
requestId,
convertHeadersMapToArray(headers),babelHelpers.extends({},
body,{trackingName:trackingName}),
responseType,
incrementalUpdates,
timeout,
withCredentials);

callback(requestId);
}},{key:"abortRequest",value:function abortRequest(

requestId){
RCTNetworkingNative.abortRequest(requestId);
}},{key:"clearCookies",value:function clearCookies(

callback){
RCTNetworkingNative.clearCookies(callback);
}}]);return RCTNetworking;}(NativeEventEmitter);


module.exports=new RCTNetworking();