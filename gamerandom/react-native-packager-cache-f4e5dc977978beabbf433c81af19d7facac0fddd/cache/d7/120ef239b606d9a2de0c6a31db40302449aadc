/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @polyfill
 * 
 */

'use strict';





































global.require=_require;
global.__d=define;

var modules=Object.create(null);
{
var verboseNamesToModuleIds=Object.create(null);
}

function define(
factory,
moduleId,
dependencyMap)
{
if(moduleId in modules){
// prevent repeated calls to `global.nativeRequire` to overwrite modules
// that are already loaded
return;
}
modules[moduleId]={
dependencyMap:dependencyMap,
exports:undefined,
factory:factory,
hasError:false,
isInitialized:false};

{
// HMR
modules[moduleId].hot=createHotReloadingObject();

// DEBUGGABLE MODULES NAMES
// we take `verboseName` from `arguments` to avoid an unused named parameter
// in `define` in production.
var _verboseName=arguments[3];
if(_verboseName){
modules[moduleId].verboseName=_verboseName;
verboseNamesToModuleIds[_verboseName]=moduleId;
}
}
}

function _require(moduleId){
if(typeof moduleId==='string'){
var _verboseName2=moduleId;
moduleId=verboseNamesToModuleIds[moduleId];
if(moduleId==null){
throw new Error("Unknown named module: '"+_verboseName2+"'");
}else{
console.warn(
"Requiring module '"+_verboseName2+"' by name is only supported for "+
'debugging purposes and will BREAK IN PRODUCTION!');

}
}

//$FlowFixMe: at this point we know that moduleId is a number
var moduleIdReallyIsNumber=moduleId;
var module=modules[moduleIdReallyIsNumber];
return module&&module.isInitialized?
module.exports:
guardedLoadModule(moduleIdReallyIsNumber,module);
}

var inGuard=false;
function guardedLoadModule(moduleId,module){
if(!inGuard&&global.ErrorUtils){
inGuard=true;
var returnValue=void 0;
try{
returnValue=loadModuleImplementation(moduleId,module);
}catch(e){
global.ErrorUtils.reportFatalError(e);
}
inGuard=false;
return returnValue;
}else{
return loadModuleImplementation(moduleId,module);
}
}

function loadModuleImplementation(moduleId,module){
var nativeRequire=global.nativeRequire;
if(!module&&nativeRequire){
nativeRequire(moduleId);
module=modules[moduleId];
}

if(!module){
throw unknownModuleError(moduleId);
}

if(module.hasError){
throw moduleThrewError(moduleId,module.error);
}

// `require` calls int  the require polyfill itself are not analyzed and
// replaced so that they use numeric module IDs.
// The systrace module will expose itself on the require function so that
// it can be used here.
// TODO(davidaurelio) Scan polyfills for dependencies, too (t9759686)
{var
Systrace=_require.Systrace;
}

// We must optimistically mark module as initialized before running the
// factory to keep any require cycles inside the factory from causing an
// infinite require loop.
module.isInitialized=true;
var exports=module.exports={};var _module=
module,factory=_module.factory,dependencyMap=_module.dependencyMap;
try{
{
// $FlowFixMe: we know that __DEV__ is const and `Systrace` exists
Systrace.beginEvent('JS_require_'+(module.verboseName||moduleId));
}

var _moduleObject={exports:exports};
if(module.hot){
_moduleObject.hot=module.hot;
}

// keep args in sync with with defineModuleCode in
// packager/src//Resolver/index.js
// and packager/src//ModuleGraph/worker.js
factory(global,_require,_moduleObject,exports,dependencyMap);

// avoid removing factory in DEV mode as it breaks HMR





{
// $FlowFixMe: we know that __DEV__ is const and `Systrace` exists
Systrace.endEvent();
}
return module.exports=_moduleObject.exports;
}catch(e){
module.hasError=true;
module.error=e;
module.isInitialized=false;
module.exports=undefined;
throw e;
}
}

function unknownModuleError(id){
var message='Requiring unknown module "'+id+'".';
{
message+="If you are sure the module is there, try restarting the packager. You may also want to run `npm install`, or `yarn` (depending on your environment).";


}
return Error(message);
}

function moduleThrewError(id,error){
var displayName=modules[id]&&modules[id].verboseName||id;
return Error('Requiring module "'+displayName+'", which threw an exception: '+error);
}

{
_require.Systrace={beginEvent:function beginEvent(){},endEvent:function endEvent(){}};

// HOT MODULE RELOADING
var createHotReloadingObject=function createHotReloadingObject(){
var hot={
acceptCallback:null,
accept:function accept(callback){hot.acceptCallback=callback;}};

return hot;
};

var acceptAll=function acceptAll(
dependentModules,
inverseDependencies)
{
if(!dependentModules||dependentModules.length===0){
return true;
}

var notAccepted=dependentModules.filter(
function(module){return!_accept(module,/*factory*/undefined,inverseDependencies);});

var parents=[];
for(var i=0;i<notAccepted.length;i++){
// if the module has no parents then the change cannot be hot loaded
if(inverseDependencies[notAccepted[i]].length===0){
return false;
}

parents.push.apply(parents,babelHelpers.toConsumableArray(inverseDependencies[notAccepted[i]]));
}

return acceptAll(parents,inverseDependencies);
};

var _accept=function _accept(
id,
factory,
inverseDependencies)
{
var mod=modules[id];

if(!mod&&factory){// new modules need a factory
define(factory,id);
return true;// new modules don't need to be accepted
}var

hot=mod.hot;
if(!hot){
console.warn("Cannot accept module because Hot Module Replacement API was not installed.");



return false;
}

// replace and initialize factory
if(factory){
mod.factory=factory;
}
mod.hasError=false;
mod.isInitialized=false;
_require(id);

if(hot.acceptCallback){
hot.acceptCallback();
return true;
}else{
// need to have inverseDependencies to bubble up accept
if(!inverseDependencies){
throw new Error('Undefined `inverseDependencies`');
}

// accept parent modules recursively up until all siblings are accepted
return acceptAll(inverseDependencies[id],inverseDependencies);
}
};

global.__accept=_accept;
}