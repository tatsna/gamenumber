/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactFiberClassComponent
 * 
 */

'use strict';var _require=




require('ReactTypeOfSideEffect'),Update=_require.Update;

var ReactFeatureFlags=require('ReactFeatureFlags');var _require2=
require('ReactTypeOfInternalContext'),AsyncUpdates=_require2.AsyncUpdates;var _require3=






require('ReactFiberContext'),cacheContext=_require3.cacheContext,getMaskedContext=_require3.getMaskedContext,getUnmaskedContext=_require3.getUnmaskedContext,isContextConsumer=_require3.isContextConsumer;var _require4=





require('ReactFiberUpdateQueue'),addUpdate=_require4.addUpdate,addReplaceUpdate=_require4.addReplaceUpdate,addForceUpdate=_require4.addForceUpdate,beginUpdateQueue=_require4.beginUpdateQueue;var _require5=
require('ReactFiberContext'),hasContextChanged=_require5.hasContextChanged;var _require6=
require('ReactFiberTreeReflection'),isMounted=_require6.isMounted;
var ReactInstanceMap=require('ReactInstanceMap');
var emptyObject=require('fbjs/lib/emptyObject');
var getComponentName=require('getComponentName');
var shallowEqual=require('fbjs/lib/shallowEqual');
var invariant=require('fbjs/lib/invariant');

var isArray=Array.isArray;

{var _require7=
require('ReactDebugFiberPerf'),startPhaseTimer=_require7.startPhaseTimer,stopPhaseTimer=_require7.stopPhaseTimer;
var warning=require('fbjs/lib/warning');
var warnOnInvalidCallback=function warnOnInvalidCallback(callback,callerName){
warning(
callback===null||typeof callback==='function',"%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.",


callerName,
callback);

};
}

module.exports=function(
scheduleUpdate,
getPriorityContext,
memoizeProps,
memoizeState)
{
// Class component state updater
var updater={
isMounted:isMounted,
enqueueSetState:function enqueueSetState(instance,partialState,callback){
var fiber=ReactInstanceMap.get(instance);
var priorityLevel=getPriorityContext(fiber,false);
callback=callback===undefined?null:callback;
{
warnOnInvalidCallback(callback,'setState');
}
addUpdate(fiber,partialState,callback,priorityLevel);
scheduleUpdate(fiber,priorityLevel);
},
enqueueReplaceState:function enqueueReplaceState(instance,state,callback){
var fiber=ReactInstanceMap.get(instance);
var priorityLevel=getPriorityContext(fiber,false);
callback=callback===undefined?null:callback;
{
warnOnInvalidCallback(callback,'replaceState');
}
addReplaceUpdate(fiber,state,callback,priorityLevel);
scheduleUpdate(fiber,priorityLevel);
},
enqueueForceUpdate:function enqueueForceUpdate(instance,callback){
var fiber=ReactInstanceMap.get(instance);
var priorityLevel=getPriorityContext(fiber,false);
callback=callback===undefined?null:callback;
{
warnOnInvalidCallback(callback,'forceUpdate');
}
addForceUpdate(fiber,callback,priorityLevel);
scheduleUpdate(fiber,priorityLevel);
}};


function checkShouldComponentUpdate(
workInProgress,
oldProps,
newProps,
oldState,
newState,
newContext)
{
if(
oldProps===null||
workInProgress.updateQueue!==null&&
workInProgress.updateQueue.hasForceUpdate)
{
// If the workInProgress already has an Update effect, return true
return true;
}

var instance=workInProgress.stateNode;
var type=workInProgress.type;
if(typeof instance.shouldComponentUpdate==='function'){
{
startPhaseTimer(workInProgress,'shouldComponentUpdate');
}
var shouldUpdate=instance.shouldComponentUpdate(
newProps,
newState,
newContext);

{
stopPhaseTimer();
}

{
warning(
shouldUpdate!==undefined,"%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.",


getComponentName(workInProgress)||'Unknown');

}

return shouldUpdate;
}

if(type.prototype&&type.prototype.isPureReactComponent){
return(
!shallowEqual(oldProps,newProps)||!shallowEqual(oldState,newState));

}

return true;
}

function checkClassInstance(workInProgress){
var instance=workInProgress.stateNode;
var type=workInProgress.type;
{
var name=getComponentName(workInProgress);
var renderPresent=instance.render;
warning(
renderPresent,"%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.",


name);

var noGetInitialStateOnES6=
!instance.getInitialState||
instance.getInitialState.isReactClassApproved||
instance.state;
warning(
noGetInitialStateOnES6,"getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?",



name);

var noGetDefaultPropsOnES6=
!instance.getDefaultProps||
instance.getDefaultProps.isReactClassApproved;
warning(
noGetDefaultPropsOnES6,"getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.",



name);

var noInstancePropTypes=!instance.propTypes;
warning(
noInstancePropTypes,"propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.",


name);

var noInstanceContextTypes=!instance.contextTypes;
warning(
noInstanceContextTypes,"contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.",


name);

var noComponentShouldUpdate=
typeof instance.componentShouldUpdate!=='function';
warning(
noComponentShouldUpdate,"%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",




name);

if(
type.prototype&&
type.prototype.isPureReactComponent&&
typeof instance.shouldComponentUpdate!=='undefined')
{
warning(
false,"%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.",



getComponentName(workInProgress)||'A pure component');

}
var noComponentDidUnmount=
typeof instance.componentDidUnmount!=='function';
warning(
noComponentDidUnmount,"%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?",



name);

var noComponentWillRecieveProps=
typeof instance.componentWillRecieveProps!=='function';
warning(
noComponentWillRecieveProps,"%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?",


name);

var hasMutatedProps=instance.props!==workInProgress.pendingProps;
warning(
instance.props===undefined||!hasMutatedProps,"%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.",


name,
name);

var noInstanceDefaultProps=!instance.defaultProps;
warning(
noInstanceDefaultProps,"Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.",


name,
name);

}

var state=instance.state;
if(state&&(typeof state!=='object'||isArray(state))){
invariant(
false,
'%s.state: must be set to an object or null',
getComponentName(workInProgress));

}
if(typeof instance.getChildContext==='function'){
invariant(
typeof workInProgress.type.childContextTypes==='object',"%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().",


getComponentName(workInProgress));

}
}

function resetInputPointers(workInProgress,instance){
instance.props=workInProgress.memoizedProps;
instance.state=workInProgress.memoizedState;
}

function adoptClassInstance(workInProgress,instance){
instance.updater=updater;
workInProgress.stateNode=instance;
// The instance needs access to the fiber so that it can schedule updates
ReactInstanceMap.set(instance,workInProgress);
}

function constructClassInstance(workInProgress,props){
var ctor=workInProgress.type;
var unmaskedContext=getUnmaskedContext(workInProgress);
var needsContext=isContextConsumer(workInProgress);
var context=needsContext?
getMaskedContext(workInProgress,unmaskedContext):
emptyObject;
var instance=new ctor(props,context);
adoptClassInstance(workInProgress,instance);

// Cache unmasked context so we can avoid recreating masked context unless necessary.
// ReactFiberContext usually updates this cache but can't for newly-created instances.
if(needsContext){
cacheContext(workInProgress,unmaskedContext,context);
}

return instance;
}

// Invokes the mount life-cycles on a previously never rendered instance.
function mountClassInstance(
workInProgress,
priorityLevel)
{
{
checkClassInstance(workInProgress);
}

var instance=workInProgress.stateNode;
var state=instance.state||null;

var props=workInProgress.pendingProps;
invariant(
props,"There must be pending props for an initial mount. This error is likely caused by a bug in React. Please file an issue.");




var unmaskedContext=getUnmaskedContext(workInProgress);

instance.props=props;
instance.state=state;
instance.refs=emptyObject;
instance.context=getMaskedContext(workInProgress,unmaskedContext);

if(
ReactFeatureFlags.enableAsyncSubtreeAPI&&
workInProgress.type!=null&&
workInProgress.type.unstable_asyncUpdates===true)
{
workInProgress.internalContextTag|=AsyncUpdates;
}

if(typeof instance.componentWillMount==='function'){
{
startPhaseTimer(workInProgress,'componentWillMount');
}
instance.componentWillMount();
{
stopPhaseTimer();
}
// If we had additional state updates during this life-cycle, let's
// process them now.
var updateQueue=workInProgress.updateQueue;
if(updateQueue!==null){
instance.state=beginUpdateQueue(
workInProgress,
updateQueue,
instance,
state,
props,
priorityLevel);

}
}
if(typeof instance.componentDidMount==='function'){
workInProgress.effectTag|=Update;
}
}

// Called on a preexisting class instance. Returns false if a resumed render
// could be reused.
function resumeMountClassInstance(
workInProgress,
priorityLevel)
{
var instance=workInProgress.stateNode;
resetInputPointers(workInProgress,instance);

var newState=workInProgress.memoizedState;
var newProps=workInProgress.pendingProps;
if(!newProps){
// If there isn't any new props, then we'll reuse the memoized props.
// This could be from already completed work.
newProps=workInProgress.memoizedProps;
invariant(
newProps!=null,"There should always be pending or memoized props. This error is likely caused by a bug in React. Please file an issue.");



}
var newUnmaskedContext=getUnmaskedContext(workInProgress);
var newContext=getMaskedContext(workInProgress,newUnmaskedContext);

// TODO: Should we deal with a setState that happened after the last
// componentWillMount and before this componentWillMount? Probably
// unsupported anyway.

if(
!checkShouldComponentUpdate(
workInProgress,
workInProgress.memoizedProps,
newProps,
workInProgress.memoizedState,
newState,
newContext))

{
// Update the existing instance's state, props, and context pointers even
// though we're bailing out.
instance.props=newProps;
instance.state=newState;
instance.context=newContext;
return false;
}

// If we didn't bail out we need to construct a new instance. We don't
// want to reuse one that failed to fully mount.
var newInstance=constructClassInstance(workInProgress,newProps);
newInstance.props=newProps;
newInstance.state=newState=newInstance.state||null;
newInstance.context=newContext;

if(typeof newInstance.componentWillMount==='function'){
{
startPhaseTimer(workInProgress,'componentWillMount');
}
newInstance.componentWillMount();
{
stopPhaseTimer();
}
}
// If we had additional state updates, process them now.
// They may be from componentWillMount() or from error boundary's setState()
// during initial mounting.
var newUpdateQueue=workInProgress.updateQueue;
if(newUpdateQueue!==null){
newInstance.state=beginUpdateQueue(
workInProgress,
newUpdateQueue,
newInstance,
newState,
newProps,
priorityLevel);

}
if(typeof instance.componentDidMount==='function'){
workInProgress.effectTag|=Update;
}
return true;
}

// Invokes the update life-cycles and returns false if it shouldn't rerender.
function updateClassInstance(
current,
workInProgress,
priorityLevel)
{
var instance=workInProgress.stateNode;
resetInputPointers(workInProgress,instance);

var oldProps=workInProgress.memoizedProps;
var newProps=workInProgress.pendingProps;
if(!newProps){
// If there aren't any new props, then we'll reuse the memoized props.
// This could be from already completed work.
newProps=oldProps;
invariant(
newProps!=null,"There should always be pending or memoized props. This error is likely caused by a bug in React. Please file an issue.");



}
var oldContext=instance.context;
var newUnmaskedContext=getUnmaskedContext(workInProgress);
var newContext=getMaskedContext(workInProgress,newUnmaskedContext);

// Note: During these life-cycles, instance.props/instance.state are what
// ever the previously attempted to render - not the "current". However,
// during componentDidUpdate we pass the "current" props.

if(oldProps!==newProps||oldContext!==newContext){
if(typeof instance.componentWillReceiveProps==='function'){
{
startPhaseTimer(workInProgress,'componentWillReceiveProps');
}
instance.componentWillReceiveProps(newProps,newContext);
{
stopPhaseTimer();
}

if(instance.state!==workInProgress.memoizedState){
{
warning(
false,"%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",



getComponentName(workInProgress));

}
updater.enqueueReplaceState(instance,instance.state,null);
}
}
}

// Compute the next state using the memoized state and the update queue.
var updateQueue=workInProgress.updateQueue;
var oldState=workInProgress.memoizedState;
// TODO: Previous state can be null.
var newState=void 0;
if(updateQueue!==null){
newState=beginUpdateQueue(
workInProgress,
updateQueue,
instance,
oldState,
newProps,
priorityLevel);

}else{
newState=oldState;
}

if(
oldProps===newProps&&
oldState===newState&&
!hasContextChanged()&&
!(updateQueue!==null&&updateQueue.hasForceUpdate))
{
// If an update was already in progress, we should schedule an Update
// effect even though we're bailing out, so that cWU/cDU are called.
if(typeof instance.componentDidUpdate==='function'){
if(
oldProps!==current.memoizedProps||
oldState!==current.memoizedState)
{
workInProgress.effectTag|=Update;
}
}
return false;
}

var shouldUpdate=checkShouldComponentUpdate(
workInProgress,
oldProps,
newProps,
oldState,
newState,
newContext);


if(shouldUpdate){
if(typeof instance.componentWillUpdate==='function'){
{
startPhaseTimer(workInProgress,'componentWillUpdate');
}
instance.componentWillUpdate(newProps,newState,newContext);
{
stopPhaseTimer();
}
}
if(typeof instance.componentDidUpdate==='function'){
workInProgress.effectTag|=Update;
}
}else{
// If an update was already in progress, we should schedule an Update
// effect even though we're bailing out, so that cWU/cDU are called.
if(typeof instance.componentDidUpdate==='function'){
if(
oldProps!==current.memoizedProps||
oldState!==current.memoizedState)
{
workInProgress.effectTag|=Update;
}
}

// If shouldComponentUpdate returned false, we should still update the
// memoized props/state to indicate that this work can be reused.
memoizeProps(workInProgress,newProps);
memoizeState(workInProgress,newState);
}

// Update the existing instance's state, props, and context pointers even
// if shouldComponentUpdate returns false.
instance.props=newProps;
instance.state=newState;
instance.context=newContext;

return shouldUpdate;
}

return{
adoptClassInstance:adoptClassInstance,
constructClassInstance:constructClassInstance,
mountClassInstance:mountClassInstance,
resumeMountClassInstance:resumeMountClassInstance,
updateClassInstance:updateClassInstance};

};