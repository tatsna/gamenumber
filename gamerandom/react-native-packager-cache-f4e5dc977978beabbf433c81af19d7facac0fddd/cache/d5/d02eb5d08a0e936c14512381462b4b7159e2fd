/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule StatusBar
 * 
 */
'use strict';

var React=require('React');
var PropTypes=require('prop-types');
var ColorPropType=require('ColorPropType');
var Platform=require('Platform');

var processColor=require('processColor');

var StatusBarManager=require('NativeModules').StatusBarManager;

/**
 * Status bar style
 */















/**
 * Status bar animation
 */



















/**
 * Merges the prop stack with the default values.
 */
function mergePropsStack(propsStack,defaultValues){
return propsStack.reduce(function(prev,cur){
for(var prop in cur){
if(cur[prop]!=null){
prev[prop]=cur[prop];
}
}
return prev;
},babelHelpers.extends({},defaultValues));
}

/**
 * Returns an object to insert in the props stack from the props
 * and the transition/animation info.
 */
function createStackEntry(props){
return{
backgroundColor:props.backgroundColor!=null?{
value:props.backgroundColor,
animated:props.animated}:
null,
barStyle:props.barStyle!=null?{
value:props.barStyle,
animated:props.animated}:
null,
translucent:props.translucent,
hidden:props.hidden!=null?{
value:props.hidden,
animated:props.animated,
transition:props.showHideTransition}:
null,
networkActivityIndicatorVisible:props.networkActivityIndicatorVisible};

}

/**
 * Component to control the app status bar.
 *
 * ### Usage with Navigator
 *
 * It is possible to have multiple `StatusBar` components mounted at the same
 * time. The props will be merged in the order the `StatusBar` components were
 * mounted. One use case is to specify status bar styles per route using `Navigator`.
 *
 * ```
 *  <View>
 *    <StatusBar
 *      backgroundColor="blue"
 *      barStyle="light-content"
 *    />
 *    <Navigator
 *      initialRoute={{statusBarHidden: true}}
 *      renderScene={(route, navigator) =>
 *        <View>
 *          <StatusBar hidden={route.statusBarHidden} />
 *          ...
 *        </View>
 *      }
 *    />
 *  </View>
 * ```
 *
 * ### Imperative API
 *
 * For cases where using a component is not ideal, there is also an imperative
 * API exposed as static functions on the component. It is however not recommended
 * to use the static API and the component for the same prop because any value
 * set by the static API will get overriden by the one set by the component in
 * the next render.
 *
 * ###Â Constants
 *
 * `currentHeight` (Android only) The height of the status bar.
 */var
StatusBar=function(_React$Component){babelHelpers.inherits(StatusBar,_React$Component);function StatusBar(){var _ref;var _temp,_this,_ret;babelHelpers.classCallCheck(this,StatusBar);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return _ret=(_temp=(_this=babelHelpers.possibleConstructorReturn(this,(_ref=StatusBar.__proto__||Object.getPrototypeOf(StatusBar)).call.apply(_ref,[this].concat(args))),_this),_this.






































































































































































_stackEntry=null,_this.

































_updatePropsStack=function(){
// Send the update to the native module only once at the end of the frame.
clearImmediate(StatusBar._updateImmediate);
StatusBar._updateImmediate=setImmediate(function(){
var oldProps=StatusBar._currentValues;
var mergedProps=mergePropsStack(StatusBar._propsStack,StatusBar._defaultProps);

// Update the props that have changed using the merged values from the props stack.





















{
if(!oldProps||oldProps.barStyle.value!==mergedProps.barStyle.value){
StatusBarManager.setStyle(mergedProps.barStyle.value);
}
if(!oldProps||oldProps.backgroundColor.value!==mergedProps.backgroundColor.value){
StatusBarManager.setColor(
processColor(mergedProps.backgroundColor.value),
mergedProps.backgroundColor.animated);

}
if(!oldProps||oldProps.hidden.value!==mergedProps.hidden.value){
StatusBarManager.setHidden(mergedProps.hidden.value);
}
if(!oldProps||oldProps.translucent!==mergedProps.translucent){
StatusBarManager.setTranslucent(mergedProps.translucent);
}
}
// Update the current prop values.
StatusBar._currentValues=mergedProps;
});
},_temp),babelHelpers.possibleConstructorReturn(_this,_ret);}// Timer for updating the native module values at the end of the frame.
// The current merged values from the props stack.
// TODO(janic): Provide a real API to deal with status bar height. See the
// discussion in #6195.
/**
   * The current height of the status bar on the device.
   *
   * @platform android
   */babelHelpers.createClass(StatusBar,[{key:"componentDidMount",value:function componentDidMount(){// Every time a StatusBar component is mounted, we push it's prop to a stack
// and always update the native status bar with the props from the top of then
// stack. This allows having multiple StatusBar components and the one that is
// added last or is deeper in the view hierachy will have priority.
this._stackEntry=createStackEntry(this.props);StatusBar._propsStack.push(this._stackEntry);this._updatePropsStack();}},{key:"componentWillUnmount",value:function componentWillUnmount(){// When a StatusBar is unmounted, remove itself from the stack and update
// the native bar with the next props.
// $FlowFixMe found when converting React.createClass to ES6
var index=StatusBar._propsStack.indexOf(this._stackEntry);StatusBar._propsStack.splice(index,1);this._updatePropsStack();}},{key:"componentDidUpdate",value:function componentDidUpdate(){// $FlowFixMe found when converting React.createClass to ES6
var index=StatusBar._propsStack.indexOf(this._stackEntry);this._stackEntry=createStackEntry(this.props);StatusBar._propsStack[index]=this._stackEntry;this._updatePropsStack();}/**
   * Updates the native status bar with the props from the stack.
   */},{key:"render",value:function render(){return null;}}],[{key:"setHidden",// Provide an imperative API as static functions of the component.
// See the corresponding prop for more detail.
/**
   * Show or hide the status bar
   * @param hidden Hide the status bar.
   * @param animation Optional animation when
   *    changing the status bar hidden property.
   */value:function setHidden(hidden,animation){animation=animation||'none';StatusBar._defaultProps.hidden.value=hidden;{StatusBarManager.setHidden(hidden);}}/**
   * Set the status bar style
   * @param style Status bar style to set
   * @param animated Animate the style change.
   */},{key:"setBarStyle",value:function setBarStyle(style,animated){animated=animated||false;StatusBar._defaultProps.barStyle.value=style;{StatusBarManager.setStyle(style);}}/**
   * Control the visibility of the network activity indicator
   * @param visible Show the indicator.
   */},{key:"setNetworkActivityIndicatorVisible",value:function setNetworkActivityIndicatorVisible(visible){{console.warn('`setNetworkActivityIndicatorVisible` is only available on iOS');return;}StatusBar._defaultProps.networkActivityIndicatorVisible=visible;StatusBarManager.setNetworkActivityIndicatorVisible(visible);}/**
   * Set the background color for the status bar
   * @param color Background color.
   * @param animated Animate the style change.
   */},{key:"setBackgroundColor",value:function setBackgroundColor(color,animated){animated=animated||false;StatusBar._defaultProps.backgroundColor.value=color;StatusBarManager.setColor(processColor(color),animated);}/**
   * Control the translucency of the status bar
   * @param translucent Set as translucent.
   */},{key:"setTranslucent",value:function setTranslucent(translucent){StatusBar._defaultProps.translucent=translucent;StatusBarManager.setTranslucent(translucent);}}]);return StatusBar;}(React.Component);StatusBar._propsStack=[];StatusBar._defaultProps=createStackEntry({animated:false,showHideTransition:'fade',backgroundColor:'black',barStyle:'default',translucent:false,hidden:false,networkActivityIndicatorVisible:false});StatusBar._updateImmediate=null;StatusBar._currentValues=null;StatusBar.currentHeight=StatusBarManager.HEIGHT;StatusBar.propTypes={/**
     * If the status bar is hidden.
     */hidden:PropTypes.bool,/**
     * If the transition between status bar property changes should be animated.
     * Supported for backgroundColor, barStyle and hidden.
     */animated:PropTypes.bool,/**
     * The background color of the status bar.
     * @platform android
     */backgroundColor:ColorPropType,/**
     * If the status bar is translucent.
     * When translucent is set to true, the app will draw under the status bar.
     * This is useful when using a semi transparent status bar color.
     *
     * @platform android
     */translucent:PropTypes.bool,/**
     * Sets the color of the status bar text.
     */barStyle:PropTypes.oneOf(['default','light-content','dark-content']),/**
     * If the network activity indicator should be visible.
     *
     * @platform ios
     */networkActivityIndicatorVisible:PropTypes.bool,/**
     * The transition effect when showing and hiding the status bar using the `hidden`
     * prop. Defaults to 'fade'.
     *
     * @platform ios
     */showHideTransition:PropTypes.oneOf(['fade','slide'])};StatusBar.defaultProps={animated:false,showHideTransition:'fade'};module.exports=StatusBar;