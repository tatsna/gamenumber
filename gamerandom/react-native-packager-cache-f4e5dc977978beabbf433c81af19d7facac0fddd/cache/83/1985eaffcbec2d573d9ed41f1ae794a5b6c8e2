/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule symbolicateStackTrace
 * 
 */
'use strict';

var getDevServer=require('getDevServer');var _require=

require('NativeModules'),SourceCode=_require.SourceCode;

// Avoid requiring fetch on load of this module; see symbolicateStackTrace
var fetch=void 0;



function isSourcedFromDisk(sourcePath){
return!/^http/.test(sourcePath)&&/[\\/]/.test(sourcePath);
}

function symbolicateStackTrace(stack){var devServer,stackCopy,foundInternalSource,response,json;return regeneratorRuntime.async(function symbolicateStackTrace$(_context){while(1){switch(_context.prev=_context.next){case 0:
// RN currently lazy loads whatwg-fetch using a custom fetch module, which, 
// when called for the first time, requires and re-exports 'whatwg-fetch'.
// However, when a dependency of the project tries to require whatwg-fetch 
// either directly or indirectly, whatwg-fetch is required before 
// RN can lazy load whatwg-fetch. As whatwg-fetch checks
// for a fetch polyfill before loading, it will in turn try to load 
// RN's fetch module, which immediately tries to import whatwg-fetch AGAIN. 
// This causes a circular require which results in RN's fetch module
// exporting fetch as 'undefined'.
// The fix below postpones trying to load fetch until the first call to symbolicateStackTrace.
// At that time, we will have either global.fetch (whatwg-fetch) or RN's fetch.
if(!fetch){
fetch=global.fetch||require('fetch').fetch;
}

devServer=getDevServer();if(
devServer.bundleLoadedFromServer){_context.next=4;break;}throw(
new Error('Bundle was not loaded from the packager'));case 4:


stackCopy=stack;

if(SourceCode.scriptURL){
foundInternalSource=false;
stackCopy=stack.map(function(frame){
// If the sources exist on disk rather than appearing to come from the packager,
// replace the location with the packager URL until we reach an internal source
// which does not have a path (no slashes), indicating a switch from within
// the application to a surrounding debugging environment.
if(!foundInternalSource&&isSourcedFromDisk(frame.file)){
// Copy frame into new object and replace 'file' property
return babelHelpers.extends({},frame,{file:SourceCode.scriptURL});
}

foundInternalSource=true;
return frame;
});
}_context.next=8;return regeneratorRuntime.awrap(

fetch(devServer.url+'symbolicate',{
method:'POST',
body:JSON.stringify({stack:stackCopy})}));case 8:response=_context.sent;_context.next=11;return regeneratorRuntime.awrap(

response.json());case 11:json=_context.sent;return _context.abrupt("return",
json.stack);case 13:case"end":return _context.stop();}}},null,this);}


module.exports=symbolicateStackTrace;